// Разбейте код валидации на функции. Подробнее об этом говорится в теме «Валидация форм». 
// Сделайте функцию enableValidation ответственной за включение валидации всех форм.
// Пусть она принимает все нужные функциям классы и селекторы элементов как объект настроек.
// Все необходимое про объекты вы узнали ещё в предыдущем спринте.

// включение валидации вызовом enableValidation
// все настройки передаются при вызове

enableValidation({
  formSelector: '.popup__form',
  inputSelector: '.popup__input',
  submitButtonSelector: '.popup__button',
  inactiveButtonClass: 'popup__button_disabled',
  inputErrorClass: 'popup__input_type_error',
  errorClass: 'popup__error_visible'
});

// очистка ошибок валидации вызовом clearValidation

clearValidation(profileForm, validationConfig);

// В случае, если в поля «Имя» или «Название» введён любой символ, 
// кроме латинской буквы, кириллической буквы и дефиса, вывести кастомное сообщение об ошибке: 
// "Разрешены только латинские, кириллические буквы, знаки дефиса и пробелы". 
// Текст ошибки разместить в data-* атрибуте поля ввода.
// Создайте функцию clearValidation, которая очищает ошибки валидации формы и делает кнопку неактивной. 
// Эта функция должна принимать как параметры DOM-элемент формы, 
// для которой очищаются ошибки валидации и объект с настройками валидации. 
// Используйте функцию clearValidation при заполнении формы профиля во время её открытия и 
// при очистке формы добавления карточки.

// Вынесите функциональность валидации форм в файл validation.js.
// Чтобы было чуточку понятнее — пример выше, вызов функций enableValidation и 
// clearValidation должен находиться в файле index.js.А все другие функции,
//  включая декларирование функции enableValidation и валидации форм, 
// — в отдельном файле validation.js.